#include "zcommon.acs"
#import "DSDefs.acs"
#import "DSFuncs.acs"

//Yeah yeah I know this code probably looks extremely gross. I'm not gonna say you're wrong lol.

global int 2:ClientClass;
global str 1:currWeapon;

script "global_setup" enter
{
	//Reset players out of abilities.
	if(CheckInventory("inHyper"))
	{
		TakeInventory("inHyper", 1);
		TakeInventory("ComHyper", 1);
		//Delay(10);
		//SetWeapon(currWeapon);
	}
	if(CheckInventory("inAbility"))
	{
		TakeInventory("inAbility", 1);
		TakeInventory("ComAbility", 1);
		//Delay(10);
		//SetWeapon(currWeapon);  //Yeah so this causes issues in multiplayer. No simple solutions were found that didn't introduce more jank...
	}
	
	
	
	//Figure out what class the player is
	ClientClass = 1 + GetClassNumber();
	
	While(true)
	{
		Delay(2); //Run-away prevention
		//Recharge HypEnergy
		if(!CheckInventory("inHyper") && CheckInventory("HypEnergy") < 100)
		{	
			if(CheckInventory("isCommando"))
			{
				Delay(15);
				GiveInventory("HypEnergy", 1);
			}
		}
		
		//Recharge AbEnergy
		if(!CheckInventory("inAbility") && CheckInventory("AbEnergy") < 100)
		{	
			if(CheckInventory("isCommando"))
			{
				Delay(15);
				GiveInventory("AbEnergy", 3);
			}
		}
	}
}

//The systems for hypermode and abilities are currently not great, and are definitely filled with bugs, but maybe I'll come back to it later, maybe some
//time will put a better way of handling it in my head.

script 301 (void) net //hypermode
{
	/*If(CheckInventory("inHyper") && GetWeapon != "comHyper") //If you managed to break this thing, reset.
		TakeInventory("inHyper", 1);*/
		
	If(CheckInventory("HasHyper") && !CheckInventory("inHyper") && !CheckInventory("inAbility"))
	{
		If(CheckInventory("HypEnergy") >= 100)
		{
			bool hyperBroken = false;
			int attempts = 0;
			currWeapon = GetWeapon();
			GiveInventory("ComHyper", 1);
			SetWeapon("comHyper");
			Do //Wait for the player to enter hypermode (some weapon animations may make it take longer)
			{	
				attempts++;
				Delay(5);
				if(attempts >= 50) //timeout if it takes too long (usually means the player swapped immediately)
				{
					hyperBroken = true;
					break;
				}
			}
			While(!CheckInventory("inHyper"));
			Do //Now wait for hypermode to drain or for the player to swap off of it.
			{
				Delay(5);
				//print(s:getweapon());
				If(!CheckInventory("inHyper"))
				{
					//print(s:"Hypermode broken!");
					hyperBroken = true;
					break;
				}
			}While(CheckInventory("HypEnergy") > 0);
			If(!hyperBroken)
				SetWeapon(currWeapon);
			Delay(40);
			TakeInventory("ComHyper", 1);
		}
		Else
		{
			ACS_ExecuteAlways(600, 0, 1);
		}
	}
	Else if(!CheckInventory("HasHyper"))
	{
		ACS_ExecuteAlways(600, 0, 2);
	}
	Delay(20);
}

script 300 (void) net //tactical ability
{
	If(CheckInventory("HasAbility") && !CheckInventory("inAbilty") && !CheckInventory("inHyper") && CheckInventory("AbEnergy") >= 100)
	{
		int attempts = 0;
		currWeapon = GetWeapon();
		GiveInventory("ComAbility", 1);
		SetWeapon("ComAbility");
		Do //Wait for the player to enter ability animations (some weapon animations may make it take longer)
		{
			attempts++;
			Delay(5);
			if(attempts >= 50) //timeout if it takes too long (usually means the player swapped immediately)
				terminate;
		}
		While(!CheckInventory("inAbility"));
		SetWeapon(currWeapon);
		Delay(50);
		TakeInventory("ComAbility", 1);
	}
	Else if(CheckInventory("AbEnergy") < 100 && CheckInventory("HasAbility"))
	{
		ACS_ExecuteAlways(600, 0, 1);
	}
	Else if(!CheckInventory("inAbility"))
	{
		ACS_ExecuteAlways(600, 0, 2);
	}
	Delay(20);
}

script "respawn" respawn
{
	//Reset players out of abilities.
	if(CheckInventory("inHyper"))
	{
		TakeInventory("inHyper", 1);
		TakeInventory("ComHyper", 1);
	}
	if(CheckInventory("inAbility"))
	{
		TakeInventory("inAbility", 1);
		TakeInventory("ComAbility", 1);
	}
	
	ClientClass = 1 + GetClassNumber();
}

script 600 (int type) clientside
{
	switch(type)
	{
		case 1: 
			Log(s:logcolors[GetCVar("msg0color")], s:"You do not have enough energy...");
			LocalAmbientSound("Ult/HYPFAIL", 50);
			break;
		case 2:
			Log(s:logcolors[GetCVar("msg0color")], s:"The shadows evade your grasp...");
			LocalAmbientSound("Ult/HYPFAIL", 50);
			break;
	};
}